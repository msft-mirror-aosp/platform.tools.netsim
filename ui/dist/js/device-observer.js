class e{constructor(e){this.device=e}get deviceSerial(){return this.device.deviceSerial}get name(){var e;return null!==(e=this.device.name)&&void 0!==e?e:""}set name(e){this.device.name=e}get position(){const e={x:0,y:0,z:0};return"position"in this.device&&this.device.position&&"object"==typeof this.device.position&&("x"in this.device.position&&"number"==typeof this.device.position.x&&(e.x=this.device.position.x),"y"in this.device.position&&"number"==typeof this.device.position.y&&(e.y=this.device.position.y),"z"in this.device.position&&"number"==typeof this.device.position.z&&(e.z=this.device.position.z)),e}set position(e){this.device.position=e}get orientation(){const e={yaw:0,pitch:0,roll:0};return"orientation"in this.device&&this.device.orientation&&"object"==typeof this.device.orientation&&("yaw"in this.device.orientation&&"number"==typeof this.device.orientation.yaw&&(e.yaw=this.device.orientation.yaw),"pitch"in this.device.orientation&&"number"==typeof this.device.orientation.pitch&&(e.pitch=this.device.orientation.pitch),"roll"in this.device.orientation&&"number"==typeof this.device.orientation.roll&&(e.roll=this.device.orientation.roll)),e}set orientation(e){this.device.orientation=e}get chips(){var e;return null!==(e=this.device.chips)&&void 0!==e?e:[]}set chips(e){this.device.chips=e}get visible(){var e;return null===(e=this.device.visible)||void 0===e||e}set visible(e){this.device.visible=e}toggleChipState(e,i){if("bt"in e&&e.bt){if(void 0===i)return void console.log("netsim-ui: must specify lowEnergy or classic for Bluetooth");"lowEnergy"===i&&"lowEnergy"in e.bt&&e.bt.lowEnergy&&"state"in e.bt.lowEnergy&&(e.bt.lowEnergy.state="ON"===e.bt.lowEnergy.state?"OFF":"ON"),"classic"===i&&"classic"in e.bt&&e.bt.classic&&"state"in e.bt.classic&&(e.bt.classic.state="ON"===e.bt.classic.state?"OFF":"ON")}"wifi"in e&&e.wifi&&"state"in e.wifi&&(e.wifi.state="ON"===e.wifi.state?"OFF":"ON"),"uwb"in e&&e.uwb&&"state"in e.uwb&&(e.uwb.state="ON"===e.uwb.state?"OFF":"ON")}toggleCapture(e,t){"capture"in t&&t.capture&&(t.capture="ON"===t.capture?"OFF":"ON",i.updateDevice({deviceSerial:e.deviceSerial,chips:e.chips}))}}const i=new class{constructor(){this.observers=[],this.simulationInfo={devices:[],selectedSerial:"",dimension:{x:10,y:10,z:0}},this.invokeGetDevice()}invokeGetDevice(){fetch("http://localhost:7681/get-devices").then((e=>e.json())).then((e=>{this.fetchDevice(e.devices)})).catch((e=>{console.log("Cannot connect to netsim web server",e)}))}fetchDevice(i){this.simulationInfo.devices=[];for(const t of i)this.simulationInfo.devices.push(new e(t));this.notifyObservers()}updateSelected(e){this.simulationInfo.selectedSerial=e,this.notifyObservers()}handleDrop(e,i,t){for(const s of this.simulationInfo.devices)if(e===s.deviceSerial){s.position={x:i,y:t,z:s.position.z},this.updateDevice({device:{deviceSerial:e,position:s.position}});break}}updateDevice(e){const i=JSON.stringify(e);fetch("http://localhost:7681/update-device",{method:"POST",headers:{"Content-Type":"application/json","Content-Length":i.length.toString()},body:i}).then((e=>e.json())).catch((e=>{console.error("Error:",e)})),this.notifyObservers()}updateCapture(e){fetch("http://localhost:7681/netsim/set-packet-capture",{method:"POST",body:JSON.stringify(e)}).then((e=>e.json())).catch((e=>{console.error("Error:",e)})),this.notifyObservers()}registerObserver(e){this.observers.push(e),e.onNotify(this.simulationInfo)}removeObserver(e){const i=this.observers.indexOf(e);this.observers.splice(i,1)}notifyObservers(){for(const e of this.observers)e.onNotify(this.simulationInfo)}getDeviceList(){return this.simulationInfo.devices}};!async function(){const e=e=>new Promise((i=>setTimeout(i,e)));for(;;)i.invokeGetDevice(),await e(1e3)}();export{e as Device,i as simulationState};
