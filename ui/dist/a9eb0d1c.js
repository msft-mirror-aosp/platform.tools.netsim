const e=new class{constructor(){this.observers=[],this.simulationInfo={devices:[],selectedSerial:"",dimension:{x:10,y:10,z:0}},fetch("http://localhost:7681/netsim/get-devices").then((e=>e.json())).then((e=>{this.fetchDevice(e.devices)})).catch((e=>{console.log("Cannot connect to netsim web server",e)}))}fetchDevice(e){this.simulationInfo.devices=e,this.notifyObservers()}updateSelected(e){this.simulationInfo.selectedSerial=e,this.notifyObservers()}handleDrop(e,t,s){for(const i of this.simulationInfo.devices)if(e===i.deviceSerial){i.position.x=t,i.position.y=s,this.updateDevice({device:{deviceSerial:e,position:i.position}});break}}updateDevice(e){fetch("http://localhost:7681/netsim/update-device",{method:"POST",body:JSON.stringify(e)}).then((e=>e.json())).catch((e=>{console.error("Error:",e)})),this.notifyObservers()}updateCapture(e){fetch("http://localhost:7681/netsim/set-packet-capture",{method:"POST",body:JSON.stringify(e)}).then((e=>e.json())).catch((e=>{console.error("Error:",e)})),this.notifyObservers()}registerObserver(e){this.observers.push(e),e.onNotify(this.simulationInfo)}removeObserver(e){const t=this.observers.indexOf(e);this.observers.splice(t,1)}notifyObservers(){for(const e of this.observers)e.onNotify(this.simulationInfo)}getDeviceList(){return this.simulationInfo.devices}};!async function(){let t=0,s=(new Date).getTime();for(;;)if(await fetch("http://localhost:7681/netsim/register-updates").then((e=>e.json())).then((t=>{e.fetchDevice(t.devices)})).catch((e=>{console.log(e),t+=1})),t>=3){if((new Date).getTime()-s<1e3)return void alert("Failed to Connect to netsim");t=0,s=(new Date).getTime()}}();export{e as s};
