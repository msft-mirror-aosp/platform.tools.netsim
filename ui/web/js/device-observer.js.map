{"version":3,"file":"device-observer.js","sourceRoot":"","sources":["../../ts/device-observer.ts"],"names":[],"mappings":"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","sourcesContent":["// URL for netsim\nconst GET_DEVICES_URL = 'http://localhost:7681/netsim/get-devices';\nconst REGISTER_UPDATE_URL = 'http://localhost:7681/netsim/register-updates';\nconst UPDATE_DEVICE_URL = 'http://localhost:7681/netsim/update-device';\nconst SET_PACKET_CAPTURE_URL =\n  'http://localhost:7681/netsim/set-packet-capture';\n\n/**\n * Interface for a method in notifying the subscribed observers.\n * Subscribed observers must implement this interface.\n */\nexport interface Notifiable {\n  onNotify(data: {}): void;\n}\n\n// TODO(b/255353541): import message interfaces in model.proto\ninterface Radio {\n  state: string;\n  range: number;\n  txCount: number;\n  rxCount: number;\n}\n\ninterface Bluetooth {\n  lowEnergy: Radio;\n  classic: Radio;\n}\n\ninterface Chip {\n  chipId: string;\n  manufacturer: string;\n  model: string;\n  capture: string;\n  bt: Bluetooth;\n  uwb: Radio;\n  wifi: Radio;\n}\n\n/**\n * Data structure of Device.\n * Used as a reference for subscribed observers to get proper attributes.\n */\nexport interface Device {\n  deviceSerial: string;\n  name: string;\n  position: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  orientation: {\n    yaw: number;\n    pitch: number;\n    roll: number;\n  };\n  chips: Chip[];\n  visible: boolean;\n}\n\n/**\n * The most updated state of the simulation.\n * Subscribed observers must refer to this info and update accordingly.\n */\nexport interface SimulationInfo {\n  devices: Device[];\n  selectedSerial: string;\n  dimension: {\n    x: number;\n    y: number;\n    z: number;\n  };\n}\n\ninterface Observable {\n  registerObserver(elem: Notifiable): void;\n  removeObserver(elem: Notifiable): void;\n}\n\nclass SimulationState implements Observable {\n  private observers: Notifiable[] = [];\n\n  private simulationInfo: SimulationInfo = {\n    devices: [],\n    selectedSerial: '',\n    dimension: { x: 10, y: 10, z: 0 },\n  };\n\n  constructor() {\n    // initial GET\n    fetch(GET_DEVICES_URL)\n      .then(response => response.json())\n      .then(data => {\n        this.fetchDevice(data.devices);\n      })\n      .catch(error => {\n        // eslint-disable-next-line\n        console.log('Cannot connect to netsim web server', error);\n      });\n  }\n\n  fetchDevice(devices: Device[]) {\n    this.simulationInfo.devices = devices;\n    this.notifyObservers();\n  }\n\n  updateSelected(serial: string) {\n    this.simulationInfo.selectedSerial = serial;\n    this.notifyObservers();\n  }\n\n  handleDrop(serial: string, x: number, y: number) {\n    for (const device of this.simulationInfo.devices) {\n      if (serial === device.deviceSerial) {\n        device.position.x = x;\n        device.position.y = y;\n        this.updateDevice({\n          device: {\n            deviceSerial: serial,\n            position: device.position,\n          },\n        });\n        break;\n      }\n    }\n  }\n\n  updateDevice(obj: object) {\n    fetch(UPDATE_DEVICE_URL, {\n      method: 'POST',\n      body: JSON.stringify(obj),\n    })\n      .then(response => response.json())\n      .catch(error => {\n        // eslint-disable-next-line\n        console.error('Error:', error);\n      });\n    this.notifyObservers();\n  }\n\n  updateCapture(obj: object) {\n    fetch(SET_PACKET_CAPTURE_URL, {\n      method: 'POST',\n      body: JSON.stringify(obj),\n    })\n      .then(response => response.json())\n      .catch(error => {\n        // eslint-disable-next-line\n        console.error('Error:', error);\n      });\n    this.notifyObservers();\n  }\n\n  registerObserver(elem: Notifiable) {\n    this.observers.push(elem);\n    elem.onNotify(this.simulationInfo)\n  }\n\n  removeObserver(elem: Notifiable) {\n    const index = this.observers.indexOf(elem);\n    this.observers.splice(index, 1);\n  }\n\n  notifyObservers() {\n    for (const observer of this.observers) {\n      observer.onNotify(this.simulationInfo);\n    }\n  }\n\n  getDeviceList() {\n    return this.simulationInfo.devices;\n  }\n}\n\n/** Subscribed observers must register itself to the simulationState */\nexport const simulationState = new SimulationState();\n\nasync function subscribe() {\n  // net::ERR_EMPTY_RESPONSE --> subscribe rightaway\n  // net::ERR_CONNECTION_REFUSED --> subscribe after 15 seconds\n  // eslint-disable-next-line\n  while (true) {\n    await fetch(REGISTER_UPDATE_URL) // eslint-disable-line\n      .then(response => response.json())\n      .then(data => {\n        simulationState.fetchDevice(data.devices);\n      })\n      .catch(error => {\n        console.log(error); // eslint-disable-line\n      });\n  }\n}\n\nsubscribe();\n"]}