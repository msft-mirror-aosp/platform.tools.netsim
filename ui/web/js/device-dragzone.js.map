{"version":3,"file":"device-dragzone.js","sourceRoot":"","sources":["../../ts/device-dragzone.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAGhD,IAAM,cAAc,sBAApB,MAAM,cAAe,SAAQ,UAAU;IAY5C;QACE,KAAK,EAAE,CAAC;QATV,WAAM,GAAG,MAAM,CAAC;QAUd,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACzD,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACrD,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,eAAe,CAAC,EAAa;QAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;QAC3B,IAAI,EAAE,CAAC,YAAY,IAAI,EAAE,CAAC,MAAM,EAAE;YAChC,gBAAc,CAAC,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC;YACnC,6CAA6C;YAC7C,EAAE,CAAC,YAAY,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;SAC1E;IACH,CAAC;IAED,aAAa;QACX,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;QACzB,gBAAc,CAAC,OAAO,GAAG,IAAI,CAAC;IAChC,CAAC;IAED,gEAAgE;IAChE,YAAY,CAAC,EAAS;QACpB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;QACzB,IAAI,EAAE,CAAC,MAAM,EAAE;YACb,eAAe,CAAC,cAAc,CAAE,EAAE,CAAC,MAAkB,CAAC,EAAE,CAAC,CAAC;YAC1D,oFAAoF;SACrF;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA,iBAAiB,CAAC;IAC/B,CAAC;;AA1CM,qBAAM,GAAG,GAAG,CAAA;;;;GAIlB,CAAC;AANF;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;8CAChC;AAJL,cAAc;IAD1B,aAAa,CAAC,oBAAoB,CAAC;GACvB,cAAc,CAiD1B;SAjDY,cAAc","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { simulationState } from './device-observer.js';\n\n@customElement('ns-device-dragzone')\nexport class DeviceDragZone extends LitElement {\n  static dragged: EventTarget | null;\n\n  @property({ type: String, attribute: 'action' })\n  action = 'move';\n\n  static styles = css`\n    :host {\n      cursor: move;\n    }\n  `;\n\n  constructor() {\n    super();\n    this.addEventListener('dragstart', this.handleDragStart);\n    this.addEventListener('dragend', this.handleDragEnd);\n    this.addEventListener('click', this.handleSelect);\n  }\n\n  connectedCallback() {\n    this.draggable = true;\n  }\n\n  handleDragStart(ev: DragEvent) {\n    this.style.opacity = '0.4';\n    if (ev.dataTransfer && ev.target) {\n      DeviceDragZone.dragged = ev.target;\n      // eslint-disable-next-line no-param-reassign\n      ev.dataTransfer.effectAllowed = this.action === 'move' ? 'move' : 'copy';\n    }\n  }\n\n  handleDragEnd() {\n    this.style.opacity = '1';\n    DeviceDragZone.dragged = null;\n  }\n\n  // Allow the information panel to figure what has been selected.\n  handleSelect(ev: Event) {\n    this.style.opacity = '1';\n    if (ev.target) {\n      simulationState.updateSelected((ev.target as Element).id);\n      // We can add a feature for visually showing a selected object (i.e. bolded borders)\n    }\n  }\n\n  render() {\n    return html` <slot></slot> `;\n  }\n}\n"]}