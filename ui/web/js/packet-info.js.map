{"version":3,"file":"packet-info.js","sourceRoot":"","sources":["../../ts/packet-info.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAIL,eAAe,GAChB,MAAM,sBAAsB,CAAC;AAGvB,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,UAAU;IAA1C;;QACL;;WAEG;QACS,eAAU,GAAa,EAAE,CAAC;IAmPxC,CAAC;IA3IC,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC,CAAC,sBAAsB;QACjD,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,oBAAoB;QAClB,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACrC,KAAK,CAAC,oBAAoB,EAAE,CAAC,CAAC,sBAAsB;IACtD,CAAC;IAED,QAAQ,CAAC,IAAoB;QAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEO,aAAa,CAAC,EAAc;QAClC,MAAM,MAAM,GAAG,EAAE,CAAC,MAA0B,CAAC;QAC7C,eAAe,CAAC,aAAa,CAAC;YAC5B,YAAY,EAAE,MAAM,CAAC,EAAE;YACvB,OAAO,EAAE,MAAM,CAAC,OAAO;SACxB,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;UAGL,IAAI,CAAC,UAAU,CAAC,GAAG,CACnB,MAAM,CAAC,EAAE,CACP,IAAI,CAAA;mCACmB,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC,YAAY;;;;;;;;;;;kBAWrD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;;YACxB,IAAI,IAAI,CAAC,EAAE,EAAE;gBACX,OAAO,IAAI,CAAA;;;;;8BAKD,MAAA,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,OAAO,mCAAI,CAAC;8BAC9B,MAAA,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,OAAO,mCAAI,CAAC;;;;;;;;8BAQ9B,MAAA,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,mCAAI,CAAC;8BAC5B,MAAA,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,mCAAI,CAAC;;;;qBAIrC,CAAC;aACH;YACD,IAAI,IAAI,CAAC,GAAG,EAAE;gBACZ,OAAO,IAAI,CAAA;;;;;8BAKD,MAAA,IAAI,CAAC,GAAG,CAAC,OAAO,mCAAI,CAAC;8BACrB,MAAA,IAAI,CAAC,GAAG,CAAC,OAAO,mCAAI,CAAC;;;;qBAI9B,CAAC;aACH;YACD,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,OAAO,IAAI,CAAA;;;;;8BAKD,MAAA,IAAI,CAAC,IAAI,CAAC,OAAO,mCAAI,CAAC;8BACtB,MAAA,IAAI,CAAC,IAAI,CAAC,OAAO,mCAAI,CAAC;;;;qBAI/B,CAAC;aACH;YACD,OAAO,IAAI,CAAA,EAAE,CAAC;QAChB,CAAC,CAAC;;aAEL,CACJ;;;;;;;;;YASG,IAAI,CAAC,UAAU,CAAC,GAAG,CACnB,MAAM,CAAC,EAAE,CACP,IAAI,CAAA;;wBAEM,MAAM,CAAC,IAAI;wBACX,MAAM,CAAC,YAAY;;sBAErB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,IAAI,CAAC,EAAE,EAAE;gBACX,OAAO,IAAI,CAAA;+BACJ,MAAM,CAAC,YAAY;;;qCAGb,IAAI,CAAC,OAAO,KAAK,IAAI;mCACvB,IAAI,CAAC,aAAa;2BAC1B,CAAC;aACL;YACD,OAAO,IAAI,CAAA,EAAE,CAAC;QAChB,CAAC,CAAC;;;;oDAI8B,MAAM,CAAC,YAAY;;;;;;;eAOxD,CACJ;;;KAGN,CAAC;IACJ,CAAC;;AAhPM,wBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoGlB,CAAC;AAtGU;IAAX,QAAQ,EAAE;qDAA2B;AAJ3B,iBAAiB;IAD7B,aAAa,CAAC,gBAAgB,CAAC;GACnB,iBAAiB,CAuP7B;SAvPY,iBAAiB","sourcesContent":["import { css, html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport {\n  Device,\n  Notifiable,\n  SimulationInfo,\n  simulationState,\n} from './device-observer.js';\n\n@customElement('ns-packet-info')\nexport class PacketInformation extends LitElement implements Notifiable {\n  /**\n   * List of devices currently on the netsim.\n   */\n  @property() deviceData: Device[] = [];\n\n  static styles = css`\n    .panel {\n      cursor: pointer;\n      display: grid;\n      place-content: center;\n      color: black;\n      font-size: 25px;\n      font-family: 'Lato', sans-serif;\n      border: 5px solid black;\n      border-radius: 12px;\n      padding: 10px;\n      background-color: #ffffff;\n      max-width: max-content;\n      float: left;\n    }\n\n    .title {\n      font-weight: bold;\n      text-transform: uppercase;\n      text-align: center;\n      margin-bottom: 10px;\n    }\n\n    .label {\n      text-align: left;\n    }\n\n    .styled-table {\n      border-collapse: collapse;\n      margin: 25px 0;\n      font-size: 20px;\n      font-family: sans-serif;\n      width: 100%;\n      box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);\n    }\n\n    .styled-table thead tr {\n      background-color: #009879;\n      color: #ffffff;\n      text-align: left;\n    }\n\n    .styled-table th,\n    .styled-table td {\n      padding: 12px 15px;\n      text-align: left;\n    }\n\n    .styled-table tbody tr {\n      border-bottom: 1px solid #dddddd;\n    }\n\n    .styled-table tbody tr:nth-of-type(even) {\n      background-color: #cac0c0;\n    }\n\n    input[type='button'] {\n      height: 2rem;\n      font-size: inherit;\n    }\n\n    input[type='checkbox'].switch_1 {\n      font-size: 30px;\n      -webkit-appearance: none;\n      -moz-appearance: none;\n      appearance: none;\n      width: 3.5em;\n      height: 1.5em;\n      background: #ddd;\n      border-radius: 3em;\n      position: relative;\n      cursor: pointer;\n      outline: none;\n      -webkit-transition: all 0.2s ease-in-out;\n      transition: all 0.2s ease-in-out;\n    }\n\n    input[type='checkbox'].switch_1:checked {\n      background: #0ebeff;\n    }\n\n    input[type='checkbox'].switch_1:after {\n      position: absolute;\n      content: '';\n      width: 1.5em;\n      height: 1.5em;\n      border-radius: 50%;\n      background: #fff;\n      -webkit-box-shadow: 0 0 0.25em rgba(0, 0, 0, 0.3);\n      box-shadow: 0 0 0.25em rgba(0, 0, 0, 0.3);\n      -webkit-transform: scale(0.7);\n      transform: scale(0.7);\n      left: 0;\n      -webkit-transition: all 0.2s ease-in-out;\n      transition: all 0.2s ease-in-out;\n    }\n\n    input[type='checkbox'].switch_1:checked:after {\n      left: calc(100% - 1.5em);\n    }\n  `;\n\n  connectedCallback() {\n    super.connectedCallback(); // eslint-disable-line\n    simulationState.registerObserver(this);\n  }\n\n  disconnectedCallback() {\n    simulationState.removeObserver(this);\n    super.disconnectedCallback(); // eslint-disable-line\n  }\n\n  onNotify(data: SimulationInfo) {\n    this.deviceData = data.devices;\n    this.requestUpdate();\n  }\n\n  private handleCapture(ev: InputEvent) {\n    const target = ev.target as HTMLInputElement;\n    simulationState.updateCapture({\n      deviceSerial: target.id,\n      capture: target.checked,\n    });\n    this.requestUpdate();\n  }\n\n  render() {\n    return html`\n      <div class=\"panel\">\n        <div class=\"title\">Packet Info</div>\n        ${this.deviceData.map(\n          device =>\n            html`\n              <div class=\"label\">${device.name} | ${device.deviceSerial}</div>\n              <table class=\"styled-table\">\n                <tr>\n                  <th>Radio</th>\n                  <th>Start-Time</th>\n                  <th>End-Time</th>\n                  <th>RX Count</th>\n                  <th>TX Count</th>\n                  <th>RX Bytes</th>\n                  <th>TX Bytes</th>\n                </tr>\n                ${device.chips.map(chip => {\n                  if (chip.bt) {\n                    return html`\n                      <tr>\n                        <td>BLE</td>\n                        <td>N/A</td>\n                        <td>N/A</td>\n                        <td>${chip.bt.lowEnergy.rxCount ?? 0}</td>\n                        <td>${chip.bt.lowEnergy.txCount ?? 0}</td>\n                        <td>N/A</td>\n                        <td>N/A</td>\n                      </tr>\n                      <tr>\n                        <td>Bluetooth Classic</td>\n                        <td>N/A</td>\n                        <td>N/A</td>\n                        <td>${chip.bt.classic.rxCount ?? 0}</td>\n                        <td>${chip.bt.classic.txCount ?? 0}</td>\n                        <td>N/A</td>\n                        <td>N/A</td>\n                      </tr>\n                    `;\n                  }\n                  if (chip.uwb) {\n                    return html`\n                      <tr>\n                        <td>UWB</td>\n                        <td>N/A</td>\n                        <td>N/A</td>\n                        <td>${chip.uwb.rxCount ?? 0}</td>\n                        <td>${chip.uwb.txCount ?? 0}</td>\n                        <td>N/A</td>\n                        <td>N/A</td>\n                      </tr>\n                    `;\n                  }\n                  if (chip.wifi) {\n                    return html`\n                      <tr>\n                        <td>WIFI</td>\n                        <td>N/A</td>\n                        <td>N/A</td>\n                        <td>${chip.wifi.rxCount ?? 0}</td>\n                        <td>${chip.wifi.txCount ?? 0}</td>\n                        <td>N/A</td>\n                        <td>N/A</td>\n                      </tr>\n                    `;\n                  }\n                  return html``;\n                })}\n              </table>\n            `\n        )}\n        <div class=\"title\">Packet Capture</div>\n        <table class=\"styled-table\">\n          <tr>\n            <th>Name</th>\n            <th>Serial</th>\n            <th>Capture ON/OFF</th>\n            <th>Packet Trace</th>\n          </tr>\n          ${this.deviceData.map(\n            device =>\n              html`\n                <tr>\n                  <td>${device.name}</td>\n                  <td>${device.deviceSerial}</td>\n                  <td>\n                    ${device.chips.map(chip => {\n                      if (chip.bt) {\n                        return html`<input\n                          id=${device.deviceSerial}\n                          type=\"checkbox\"\n                          class=\"switch_1\"\n                          .checked=${chip.capture === 'ON'}\n                          @click=${this.handleCapture}\n                        />`;\n                      }\n                      return html``;\n                    })}\n                  </td>\n                  <td>\n                    <a\n                      href=\"http://localhost:3000/${device.deviceSerial}-hci.pcap\"\n                      target=\"_blank\"\n                      type=\"application/vnd.tcpdump.pcap\"\n                      >Download PCAP</a\n                    >\n                  </td>\n                </tr>\n              `\n          )}\n        </table>\n      </div>\n    `;\n  }\n}\n"]}