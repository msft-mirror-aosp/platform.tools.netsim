{"version":3,"file":"cube-sprite.js","sourceRoot":"","sources":["../../ts/cube-sprite.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport {\n  simulationState,\n  Notifiable,\n  SimulationInfo,\n} from './device-observer.js';\n\n@customElement('ns-cube-sprite')\nexport class CubeSprite extends LitElement implements Notifiable {\n  /**\n   * the yaw value in orientation for ns-cube-sprite\n   * unit: deg\n   */\n  @property({ type: Number })\n  yaw = -15;\n\n  /**\n   * the pitch value in orientation for ns-cube-sprite\n   * unit: deg\n   */\n  @property({ type: Number })\n  pitch = -15;\n\n  /**\n   * the roll value in orientation for ns-cube-sprite\n   * unit: deg\n   */\n  @property({ type: Number })\n  roll = 0;\n\n  /**\n   * the z value in position for ns-cube-sprite\n   * unit: cm\n   */\n  @property({ type: Number })\n  posZ = 0;\n\n  /**\n   * the css value for color\n   */\n  @property({ type: css, attribute: 'color' })\n  color = css`red`;\n\n  /**\n   * the css value for size\n   */\n  @property({ type: css, attribute: 'size' })\n  size = css`30px`;\n\n  /**\n   * A Boolean property; if set true, the user would\n   * be able to control the cube's pitch, yaw, and roll\n   * with the info panel.\n   */\n  @property({ type: Boolean })\n  controls = false;\n\n  /**\n   * A Boolean property; if set true, the box is selected\n   * therefore the outline gets dotted.\n   */\n  @property({ type: Boolean })\n  highlighted = false;\n\n  connectedCallback() {\n    super.connectedCallback(); // eslint-disable-line\n    simulationState.registerObserver(this);\n    window.addEventListener('orientationEvent', this.handleOrientationEvent);\n  }\n\n  disconnectedCallback() {\n    window.removeEventListener('orientationEvent', this.handleOrientationEvent);\n    simulationState.removeObserver(this);\n    super.disconnectedCallback(); // eslint-disable-line\n  }\n\n  onNotify(data: SimulationInfo) {\n    this.highlighted = data.selectedSerial === this.id;\n    for (const device of data.devices) {\n      if (device.deviceSerial === this.id) {\n        this.posZ = (device.position.z ?? 0) * 100;\n        return;\n      }\n    }\n  }\n\n  static styles = css`\n    :host {\n      /** all sizes are relative to font-size **/\n      display: block;\n      min-height: 1.5em;\n      min-width: 1.5em;\n      width: 1em;\n      /*  overflow: hidden; */\n      transform-origin: center;\n      transform-style: preserve-3d;\n      transform: translateZ(calc(var(--posZ) * 1px));\n    }\n\n    .cube {\n      transform-style: preserve-3d;\n      transform: rotateX(calc(var(--yaw) * 1deg))\n        rotateY(calc(var(--pitch) * 1deg)) rotateZ(calc(var(--roll) * 1deg));\n      position: absolute;\n      left: 0.25em;\n      bottom: 0.25em;\n      width: 1em;\n      height: 1em;\n    }\n    .cube > div {\n      position: absolute;\n      background-color: var(--color);\n      width: 100%;\n      height: 100%;\n      box-shadow: 0 0 0.25em #000 inset;\n    }\n    .cube > div:nth-child(1) {\n      transform: translateZ(0.5em);\n    }\n    .cube > div:nth-child(2) {\n      transform: rotateY(180deg) translateZ(0.5em);\n    }\n    .cube > div:nth-child(3) {\n      right: 0;\n      width: 1em;\n      transform: rotateY(90deg) translateZ(0.5em);\n    }\n    .cube > div:nth-child(4) {\n      width: 1em;\n      transform: rotateY(270deg) translateZ(0.5em);\n    }\n    .cube > div:nth-child(5) {\n      bottom: -0.5em;\n      height: 1em;\n      transform: rotateX(90deg);\n      box-shadow: 0 0 0.25em #000 inset, 0 0 0.25em #000;\n    }\n    .cube div:nth-child(6) {\n      height: 1em;\n      transform: translateY(-0.5em) rotateX(90deg);\n      overflow: hidden;\n    }\n\n    .line {\n      position: absolute;\n      border-bottom: 5px dashed;\n      width: calc(var(--posZ) * 1px);\n      top: 50%;\n      left: 50%;\n      transform: rotateY(90deg) rotateX(90deg);\n      transform-origin: left;\n    }\n\n    .base {\n      position: absolute;\n      border: 5px solid;\n      border-radius: 50%;\n      background-color: black;\n      height: 5px;\n      width: 5px;\n      top: 50%;\n      left: 50%;\n      transform: translate3d(-50%, -50%, calc(var(--posZ) * -1px));\n    }\n  `;\n\n  private handleOrientationEvent = (e: Event) => {\n    const { detail } = e as CustomEvent;\n    if (detail.deviceSerial === this.id && this.controls) {\n      if (detail.type === 'yaw') {\n        this.yaw = detail.value;\n      } else if (detail.type === 'pitch') {\n        this.pitch = detail.value;\n      } else {\n        this.roll = detail.value;\n      }\n    }\n  };\n\n  render() {\n    // TODO(b/255635486): Make cube easily scalable with user input size\n    return html`\n      <style>\n        :host {\n          font-size: ${this.size};\n          --color: ${this.color};\n          --yaw: ${this.yaw};\n          --pitch: ${this.pitch};\n          --roll: ${this.roll};\n          --posZ: ${this.controls ? this.posZ : 0};\n        }\n        .cube > div {\n          outline: ${this.highlighted && this.controls ? css`dashed` : css``};\n        }\n      </style>\n      <div class=\"cube\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n      ${this.controls\n        ? html`\n            <div class=\"line\"></div>\n            <div class=\"base\"></div>\n          `\n        : html``}\n    `;\n  }\n}\n"]}