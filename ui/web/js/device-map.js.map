{"version":3,"file":"device-map.js","sourceRoot":"","sources":["../../ts/device-map.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport {\n  simulationState,\n  Notifiable,\n  SimulationInfo,\n  Device,\n} from './device-observer.js';\n\n@customElement('ns-device-map')\nexport class DeviceMap extends LitElement implements Notifiable {\n  /**\n   * List of devices currently on the netsim.\n   */\n  @property() deviceData: Device[] = [];\n\n  /**\n   * Index of the background image displayed.\n   */\n  @property() imageIdx = 0;\n\n  /**\n   * Number of images available for the background.\n   */\n  @property() numImages = 3;\n\n  @property({ type: Boolean, reflect: true })\n  isometric: Boolean = false;\n\n  connectedCallback() {\n    super.connectedCallback(); // eslint-disable-line\n    simulationState.registerObserver(this);\n    window.addEventListener('map-button-clicked', this.onChangeMap);\n    window.addEventListener(\n      'isometric-button-clicked',\n      this.handleIsometricView\n    );\n  }\n\n  disconnectedCallback() {\n    window.removeEventListener(\n      'isometric-button-clicked',\n      this.handleIsometricView\n    );\n    window.removeEventListener('map-button-clicked', this.onChangeMap);\n    simulationState.removeObserver(this);\n    super.disconnectedCallback(); // eslint-disable-line\n  }\n\n  static styles = css`\n    #dropzone {\n      margin-left: 200px;\n      margin-right: 200px;\n      transition: transform 2s, top 2s;\n      transform-style: preserve-3d;\n    }\n\n    .box {\n      position: relative;\n      width: 1000px; //40vw;\n      height: 1000px; //40vh;\n      border: solid 1px rgb(198, 210, 255);\n      margin: 2.5em auto;\n    }\n\n    .pattern0 {\n      background-image: url(./assets/grid-background.svg);\n    }\n\n    .pattern1 {\n      background-image: url(./assets/polar-background.svg);\n      background-size: 1150px 1150px;\n      background-position: center;\n    }\n\n    .pattern2 {\n      background-image: url(./assets/hexagonal-background.png);\n      background-size: 1175px 1175px;\n      background-position: center;\n    }\n\n    .container {\n      display: flex;\n      width: 100%;\n    }\n\n    .contentA {\n      flex: 2;\n    }\n\n    .contentB {\n      flex: 2;\n    }\n\n    ns-device-dragzone {\n      transform-style: inherit;\n    }\n  `;\n\n  onNotify(data: SimulationInfo): void {\n    this.deviceData = data.devices;\n    this.requestUpdate();\n  }\n\n  private onChangeMap = () => {\n    this.imageIdx = (this.imageIdx + 1) % this.numImages;\n  };\n\n  private handleIsometricView = () => {\n    this.isometric = !this.isometric;\n  };\n\n  render() {\n    const rainbow = [\n      'red',\n      'orange',\n      'yellow',\n      'green',\n      'blue',\n      'indigo',\n      'purple',\n    ];\n    const viewStyle = this.isometric\n      ? `perspective(200rem) rotateX(60deg) rotateY(0deg) rotateZ(0deg) scale3d(0.8,0.8,0.8); top: 250px`\n      : 'none; top: 0px;';\n\n    return html`\n      <ns-device-dropzone>\n        <div id=\"dropzone\" class=\"box pattern${this.imageIdx}\">\n          ${this.deviceData.map(\n            (device, idx) => html`\n              ${device.visible === true\n                ? html`\n                    <ns-device-dragzone\n                      .action=${'move'}\n                      style=${styleMap({\n                        position: 'absolute',\n                        left: `${(device.position.x ?? 0) * 100}px`,\n                        top: `${(device.position.y ?? 0) * 100}px`,\n                      })}\n                    >\n                      <ns-cube-sprite\n                        id=${device.deviceSerial}\n                        .color=${rainbow[idx % rainbow.length]}\n                        .size=${'30px'}\n                        .controls=${true}\n                        yaw=${device.orientation.yaw ?? 0}\n                        pitch=${device.orientation.pitch ?? 0}\n                        roll=${device.orientation.roll ?? 0}\n                        posZ=${(device.position.z ?? 0) * 100}\n                      ></ns-cube-sprite>\n                    </ns-device-dragzone>\n                  `\n                : html``}\n            `\n          )}\n        </div>\n        <style>\n          #dropzone {\n            transform: ${viewStyle};\n          }\n        </style>\n      </ns-device-dropzone>\n    `;\n  }\n}\n"]}