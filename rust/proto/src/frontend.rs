// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `netsim/frontend.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.VersionResponse)
pub struct VersionResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.VersionResponse.version)
    pub version: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.VersionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VersionResponse {
    fn default() -> &'a VersionResponse {
        <VersionResponse as ::protobuf::Message>::default_instance()
    }
}

impl VersionResponse {
    pub fn new() -> VersionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &VersionResponse| { &m.version },
            |m: &mut VersionResponse| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VersionResponse>(
            "VersionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VersionResponse {
    const NAME: &'static str = "VersionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VersionResponse {
        VersionResponse::new()
    }

    fn clear(&mut self) {
        self.version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VersionResponse {
        static instance: VersionResponse = VersionResponse {
            version: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VersionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VersionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VersionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.CreateDeviceRequest)
pub struct CreateDeviceRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.CreateDeviceRequest.device)
    pub device: ::protobuf::MessageField<super::model::DeviceCreate>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.CreateDeviceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateDeviceRequest {
    fn default() -> &'a CreateDeviceRequest {
        <CreateDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceRequest {
    pub fn new() -> CreateDeviceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::model::DeviceCreate>(
            "device",
            |m: &CreateDeviceRequest| { &m.device },
            |m: &mut CreateDeviceRequest| { &mut m.device },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateDeviceRequest>(
            "CreateDeviceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateDeviceRequest {
    const NAME: &'static str = "CreateDeviceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.device)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.device.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateDeviceRequest {
        CreateDeviceRequest::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateDeviceRequest {
        static instance: CreateDeviceRequest = CreateDeviceRequest {
            device: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateDeviceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateDeviceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.CreateDeviceResponse)
pub struct CreateDeviceResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.CreateDeviceResponse.device)
    pub device: ::protobuf::MessageField<super::model::Device>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.CreateDeviceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateDeviceResponse {
    fn default() -> &'a CreateDeviceResponse {
        <CreateDeviceResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceResponse {
    pub fn new() -> CreateDeviceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::model::Device>(
            "device",
            |m: &CreateDeviceResponse| { &m.device },
            |m: &mut CreateDeviceResponse| { &mut m.device },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateDeviceResponse>(
            "CreateDeviceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateDeviceResponse {
    const NAME: &'static str = "CreateDeviceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.device)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.device.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateDeviceResponse {
        CreateDeviceResponse::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateDeviceResponse {
        static instance: CreateDeviceResponse = CreateDeviceResponse {
            device: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateDeviceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateDeviceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateDeviceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.DeleteChipRequest)
pub struct DeleteChipRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.DeleteChipRequest.id)
    pub id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.DeleteChipRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteChipRequest {
    fn default() -> &'a DeleteChipRequest {
        <DeleteChipRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteChipRequest {
    pub fn new() -> DeleteChipRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &DeleteChipRequest| { &m.id },
            |m: &mut DeleteChipRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteChipRequest>(
            "DeleteChipRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteChipRequest {
    const NAME: &'static str = "DeleteChipRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteChipRequest {
        DeleteChipRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteChipRequest {
        static instance: DeleteChipRequest = DeleteChipRequest {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteChipRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteChipRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteChipRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteChipRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.PatchDeviceRequest)
pub struct PatchDeviceRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.PatchDeviceRequest.id)
    pub id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:netsim.frontend.PatchDeviceRequest.device)
    pub device: ::protobuf::MessageField<patch_device_request::PatchDeviceFields>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.PatchDeviceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PatchDeviceRequest {
    fn default() -> &'a PatchDeviceRequest {
        <PatchDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PatchDeviceRequest {
    pub fn new() -> PatchDeviceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &PatchDeviceRequest| { &m.id },
            |m: &mut PatchDeviceRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, patch_device_request::PatchDeviceFields>(
            "device",
            |m: &PatchDeviceRequest| { &m.device },
            |m: &mut PatchDeviceRequest| { &mut m.device },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PatchDeviceRequest>(
            "PatchDeviceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PatchDeviceRequest {
    const NAME: &'static str = "PatchDeviceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.device)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.device.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PatchDeviceRequest {
        PatchDeviceRequest::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.device.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PatchDeviceRequest {
        static instance: PatchDeviceRequest = PatchDeviceRequest {
            id: ::std::option::Option::None,
            device: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PatchDeviceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PatchDeviceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PatchDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PatchDeviceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PatchDeviceRequest`
pub mod patch_device_request {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:netsim.frontend.PatchDeviceRequest.PatchDeviceFields)
    pub struct PatchDeviceFields {
        // message fields
        // @@protoc_insertion_point(field:netsim.frontend.PatchDeviceRequest.PatchDeviceFields.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:netsim.frontend.PatchDeviceRequest.PatchDeviceFields.visible)
        pub visible: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:netsim.frontend.PatchDeviceRequest.PatchDeviceFields.position)
        pub position: ::protobuf::MessageField<super::super::model::Position>,
        // @@protoc_insertion_point(field:netsim.frontend.PatchDeviceRequest.PatchDeviceFields.orientation)
        pub orientation: ::protobuf::MessageField<super::super::model::Orientation>,
        // @@protoc_insertion_point(field:netsim.frontend.PatchDeviceRequest.PatchDeviceFields.chips)
        pub chips: ::std::vec::Vec<super::super::model::Chip>,
        // special fields
        // @@protoc_insertion_point(special_field:netsim.frontend.PatchDeviceRequest.PatchDeviceFields.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PatchDeviceFields {
        fn default() -> &'a PatchDeviceFields {
            <PatchDeviceFields as ::protobuf::Message>::default_instance()
        }
    }

    impl PatchDeviceFields {
        pub fn new() -> PatchDeviceFields {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &PatchDeviceFields| { &m.name },
                |m: &mut PatchDeviceFields| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "visible",
                |m: &PatchDeviceFields| { &m.visible },
                |m: &mut PatchDeviceFields| { &mut m.visible },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::model::Position>(
                "position",
                |m: &PatchDeviceFields| { &m.position },
                |m: &mut PatchDeviceFields| { &mut m.position },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::model::Orientation>(
                "orientation",
                |m: &PatchDeviceFields| { &m.orientation },
                |m: &mut PatchDeviceFields| { &mut m.orientation },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "chips",
                |m: &PatchDeviceFields| { &m.chips },
                |m: &mut PatchDeviceFields| { &mut m.chips },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PatchDeviceFields>(
                "PatchDeviceRequest.PatchDeviceFields",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PatchDeviceFields {
        const NAME: &'static str = "PatchDeviceFields";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.visible = ::std::option::Option::Some(is.read_bool()?);
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                    },
                    42 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.orientation)?;
                    },
                    50 => {
                        self.chips.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.visible {
                my_size += 1 + 1;
            }
            if let Some(v) = self.position.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.orientation.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            for value in &self.chips {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.visible {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.position.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            if let Some(v) = self.orientation.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
            }
            for v in &self.chips {
                ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PatchDeviceFields {
            PatchDeviceFields::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.visible = ::std::option::Option::None;
            self.position.clear();
            self.orientation.clear();
            self.chips.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PatchDeviceFields {
            static instance: PatchDeviceFields = PatchDeviceFields {
                name: ::std::option::Option::None,
                visible: ::std::option::Option::None,
                position: ::protobuf::MessageField::none(),
                orientation: ::protobuf::MessageField::none(),
                chips: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PatchDeviceFields {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PatchDeviceRequest.PatchDeviceFields").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PatchDeviceFields {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PatchDeviceFields {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.ListDeviceResponse)
pub struct ListDeviceResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.ListDeviceResponse.devices)
    pub devices: ::std::vec::Vec<super::model::Device>,
    // @@protoc_insertion_point(field:netsim.frontend.ListDeviceResponse.last_modified)
    pub last_modified: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.ListDeviceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListDeviceResponse {
    fn default() -> &'a ListDeviceResponse {
        <ListDeviceResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListDeviceResponse {
    pub fn new() -> ListDeviceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "devices",
            |m: &ListDeviceResponse| { &m.devices },
            |m: &mut ListDeviceResponse| { &mut m.devices },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_modified",
            |m: &ListDeviceResponse| { &m.last_modified },
            |m: &mut ListDeviceResponse| { &mut m.last_modified },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListDeviceResponse>(
            "ListDeviceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListDeviceResponse {
    const NAME: &'static str = "ListDeviceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.devices.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_modified)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.devices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.last_modified.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.devices {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.last_modified.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListDeviceResponse {
        ListDeviceResponse::new()
    }

    fn clear(&mut self) {
        self.devices.clear();
        self.last_modified.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListDeviceResponse {
        static instance: ListDeviceResponse = ListDeviceResponse {
            devices: ::std::vec::Vec::new(),
            last_modified: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListDeviceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListDeviceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListDeviceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDeviceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.SubscribeDeviceRequest)
pub struct SubscribeDeviceRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.SubscribeDeviceRequest.last_modified)
    pub last_modified: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.SubscribeDeviceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeDeviceRequest {
    fn default() -> &'a SubscribeDeviceRequest {
        <SubscribeDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeDeviceRequest {
    pub fn new() -> SubscribeDeviceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_modified",
            |m: &SubscribeDeviceRequest| { &m.last_modified },
            |m: &mut SubscribeDeviceRequest| { &mut m.last_modified },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeDeviceRequest>(
            "SubscribeDeviceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeDeviceRequest {
    const NAME: &'static str = "SubscribeDeviceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_modified)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.last_modified.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.last_modified.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeDeviceRequest {
        SubscribeDeviceRequest::new()
    }

    fn clear(&mut self) {
        self.last_modified.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeDeviceRequest {
        static instance: SubscribeDeviceRequest = SubscribeDeviceRequest {
            last_modified: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeDeviceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeDeviceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeDeviceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.SubscribeDeviceResponse)
pub struct SubscribeDeviceResponse {
    // message oneof groups
    pub response: ::std::option::Option<subscribe_device_response::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.SubscribeDeviceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeDeviceResponse {
    fn default() -> &'a SubscribeDeviceResponse {
        <SubscribeDeviceResponse as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeDeviceResponse {
    pub fn new() -> SubscribeDeviceResponse {
        ::std::default::Default::default()
    }

    // .netsim.frontend.ListDeviceResponse list_device_response = 1;

    pub fn list_device_response(&self) -> &ListDeviceResponse {
        match self.response {
            ::std::option::Option::Some(subscribe_device_response::Response::ListDeviceResponse(ref v)) => v,
            _ => <ListDeviceResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_list_device_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_list_device_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(subscribe_device_response::Response::ListDeviceResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list_device_response(&mut self, v: ListDeviceResponse) {
        self.response = ::std::option::Option::Some(subscribe_device_response::Response::ListDeviceResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list_device_response(&mut self) -> &mut ListDeviceResponse {
        if let ::std::option::Option::Some(subscribe_device_response::Response::ListDeviceResponse(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(subscribe_device_response::Response::ListDeviceResponse(ListDeviceResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(subscribe_device_response::Response::ListDeviceResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list_device_response(&mut self) -> ListDeviceResponse {
        if self.has_list_device_response() {
            match self.response.take() {
                ::std::option::Option::Some(subscribe_device_response::Response::ListDeviceResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            ListDeviceResponse::new()
        }
    }

    // .google.protobuf.Empty empty_response = 2;

    pub fn empty_response(&self) -> &::protobuf::well_known_types::empty::Empty {
        match self.response {
            ::std::option::Option::Some(subscribe_device_response::Response::EmptyResponse(ref v)) => v,
            _ => <::protobuf::well_known_types::empty::Empty as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_empty_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_empty_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(subscribe_device_response::Response::EmptyResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_empty_response(&mut self, v: ::protobuf::well_known_types::empty::Empty) {
        self.response = ::std::option::Option::Some(subscribe_device_response::Response::EmptyResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_empty_response(&mut self) -> &mut ::protobuf::well_known_types::empty::Empty {
        if let ::std::option::Option::Some(subscribe_device_response::Response::EmptyResponse(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(subscribe_device_response::Response::EmptyResponse(::protobuf::well_known_types::empty::Empty::new()));
        }
        match self.response {
            ::std::option::Option::Some(subscribe_device_response::Response::EmptyResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_empty_response(&mut self) -> ::protobuf::well_known_types::empty::Empty {
        if self.has_empty_response() {
            match self.response.take() {
                ::std::option::Option::Some(subscribe_device_response::Response::EmptyResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::empty::Empty::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ListDeviceResponse>(
            "list_device_response",
            SubscribeDeviceResponse::has_list_device_response,
            SubscribeDeviceResponse::list_device_response,
            SubscribeDeviceResponse::mut_list_device_response,
            SubscribeDeviceResponse::set_list_device_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ::protobuf::well_known_types::empty::Empty>(
            "empty_response",
            SubscribeDeviceResponse::has_empty_response,
            SubscribeDeviceResponse::empty_response,
            SubscribeDeviceResponse::mut_empty_response,
            SubscribeDeviceResponse::set_empty_response,
        ));
        oneofs.push(subscribe_device_response::Response::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeDeviceResponse>(
            "SubscribeDeviceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeDeviceResponse {
    const NAME: &'static str = "SubscribeDeviceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.response = ::std::option::Option::Some(subscribe_device_response::Response::ListDeviceResponse(is.read_message()?));
                },
                18 => {
                    self.response = ::std::option::Option::Some(subscribe_device_response::Response::EmptyResponse(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &subscribe_device_response::Response::ListDeviceResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &subscribe_device_response::Response::EmptyResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &subscribe_device_response::Response::ListDeviceResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &subscribe_device_response::Response::EmptyResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeDeviceResponse {
        SubscribeDeviceResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeDeviceResponse {
        static instance: SubscribeDeviceResponse = SubscribeDeviceResponse {
            response: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeDeviceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeDeviceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeDeviceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeDeviceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SubscribeDeviceResponse`
pub mod subscribe_device_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:netsim.frontend.SubscribeDeviceResponse.response)
    pub enum Response {
        // @@protoc_insertion_point(oneof_field:netsim.frontend.SubscribeDeviceResponse.list_device_response)
        ListDeviceResponse(super::ListDeviceResponse),
        // @@protoc_insertion_point(oneof_field:netsim.frontend.SubscribeDeviceResponse.empty_response)
        EmptyResponse(::protobuf::well_known_types::empty::Empty),
    }

    impl ::protobuf::Oneof for Response {
    }

    impl ::protobuf::OneofFull for Response {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SubscribeDeviceResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
        }
    }

    impl Response {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.PatchCaptureRequest)
pub struct PatchCaptureRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.PatchCaptureRequest.id)
    pub id: u32,
    // @@protoc_insertion_point(field:netsim.frontend.PatchCaptureRequest.patch)
    pub patch: ::protobuf::MessageField<patch_capture_request::PatchCapture>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.PatchCaptureRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PatchCaptureRequest {
    fn default() -> &'a PatchCaptureRequest {
        <PatchCaptureRequest as ::protobuf::Message>::default_instance()
    }
}

impl PatchCaptureRequest {
    pub fn new() -> PatchCaptureRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PatchCaptureRequest| { &m.id },
            |m: &mut PatchCaptureRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, patch_capture_request::PatchCapture>(
            "patch",
            |m: &PatchCaptureRequest| { &m.patch },
            |m: &mut PatchCaptureRequest| { &mut m.patch },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PatchCaptureRequest>(
            "PatchCaptureRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PatchCaptureRequest {
    const NAME: &'static str = "PatchCaptureRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.patch)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if let Some(v) = self.patch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if let Some(v) = self.patch.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PatchCaptureRequest {
        PatchCaptureRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.patch.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PatchCaptureRequest {
        static instance: PatchCaptureRequest = PatchCaptureRequest {
            id: 0,
            patch: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PatchCaptureRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PatchCaptureRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PatchCaptureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PatchCaptureRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PatchCaptureRequest`
pub mod patch_capture_request {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:netsim.frontend.PatchCaptureRequest.PatchCapture)
    pub struct PatchCapture {
        // message fields
        // @@protoc_insertion_point(field:netsim.frontend.PatchCaptureRequest.PatchCapture.state)
        pub state: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:netsim.frontend.PatchCaptureRequest.PatchCapture.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PatchCapture {
        fn default() -> &'a PatchCapture {
            <PatchCapture as ::protobuf::Message>::default_instance()
        }
    }

    impl PatchCapture {
        pub fn new() -> PatchCapture {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "state",
                |m: &PatchCapture| { &m.state },
                |m: &mut PatchCapture| { &mut m.state },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PatchCapture>(
                "PatchCaptureRequest.PatchCapture",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PatchCapture {
        const NAME: &'static str = "PatchCapture";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.state = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.state {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.state {
                os.write_bool(1, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PatchCapture {
            PatchCapture::new()
        }

        fn clear(&mut self) {
            self.state = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PatchCapture {
            static instance: PatchCapture = PatchCapture {
                state: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PatchCapture {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PatchCaptureRequest.PatchCapture").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PatchCapture {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PatchCapture {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.ListCaptureResponse)
pub struct ListCaptureResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.ListCaptureResponse.captures)
    pub captures: ::std::vec::Vec<super::model::Capture>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.ListCaptureResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListCaptureResponse {
    fn default() -> &'a ListCaptureResponse {
        <ListCaptureResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListCaptureResponse {
    pub fn new() -> ListCaptureResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "captures",
            |m: &ListCaptureResponse| { &m.captures },
            |m: &mut ListCaptureResponse| { &mut m.captures },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListCaptureResponse>(
            "ListCaptureResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListCaptureResponse {
    const NAME: &'static str = "ListCaptureResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.captures.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.captures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.captures {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListCaptureResponse {
        ListCaptureResponse::new()
    }

    fn clear(&mut self) {
        self.captures.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListCaptureResponse {
        static instance: ListCaptureResponse = ListCaptureResponse {
            captures: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListCaptureResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListCaptureResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListCaptureResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListCaptureResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.GetCaptureRequest)
pub struct GetCaptureRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.GetCaptureRequest.id)
    pub id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.GetCaptureRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetCaptureRequest {
    fn default() -> &'a GetCaptureRequest {
        <GetCaptureRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCaptureRequest {
    pub fn new() -> GetCaptureRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetCaptureRequest| { &m.id },
            |m: &mut GetCaptureRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCaptureRequest>(
            "GetCaptureRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetCaptureRequest {
    const NAME: &'static str = "GetCaptureRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetCaptureRequest {
        GetCaptureRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetCaptureRequest {
        static instance: GetCaptureRequest = GetCaptureRequest {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetCaptureRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetCaptureRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetCaptureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCaptureRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.GetCaptureResponse)
pub struct GetCaptureResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.GetCaptureResponse.capture_stream)
    pub capture_stream: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.GetCaptureResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetCaptureResponse {
    fn default() -> &'a GetCaptureResponse {
        <GetCaptureResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetCaptureResponse {
    pub fn new() -> GetCaptureResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "capture_stream",
            |m: &GetCaptureResponse| { &m.capture_stream },
            |m: &mut GetCaptureResponse| { &mut m.capture_stream },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCaptureResponse>(
            "GetCaptureResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetCaptureResponse {
    const NAME: &'static str = "GetCaptureResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.capture_stream = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.capture_stream.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.capture_stream);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.capture_stream.is_empty() {
            os.write_bytes(1, &self.capture_stream)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetCaptureResponse {
        GetCaptureResponse::new()
    }

    fn clear(&mut self) {
        self.capture_stream.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetCaptureResponse {
        static instance: GetCaptureResponse = GetCaptureResponse {
            capture_stream: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetCaptureResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetCaptureResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetCaptureResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCaptureResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15netsim/frontend.proto\x12\x0fnetsim.frontend\x1a\x1bgoogle/protobu\
    f/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x12netsim/model\
    .proto\"+\n\x0fVersionResponse\x12\x18\n\x07version\x18\x01\x20\x01(\tR\
    \x07version\"I\n\x13CreateDeviceRequest\x122\n\x06device\x18\x01\x20\x01\
    (\x0b2\x1a.netsim.model.DeviceCreateR\x06device\"D\n\x14CreateDeviceResp\
    onse\x12,\n\x06device\x18\x01\x20\x01(\x0b2\x14.netsim.model.DeviceR\x06\
    device\"#\n\x11DeleteChipRequest\x12\x0e\n\x02id\x18\x02\x20\x01(\rR\x02\
    id\"\xa4\x03\n\x12PatchDeviceRequest\x12\x13\n\x02id\x18\x01\x20\x01(\rH\
    \0R\x02id\x88\x01\x01\x12M\n\x06device\x18\x02\x20\x01(\x0b25.netsim.fro\
    ntend.PatchDeviceRequest.PatchDeviceFieldsR\x06device\x1a\xa2\x02\n\x11P\
    atchDeviceFields\x12\x17\n\x04name\x18\x02\x20\x01(\tH\0R\x04name\x88\
    \x01\x01\x12\x1d\n\x07visible\x18\x03\x20\x01(\x08H\x01R\x07visible\x88\
    \x01\x01\x127\n\x08position\x18\x04\x20\x01(\x0b2\x16.netsim.model.Posit\
    ionH\x02R\x08position\x88\x01\x01\x12@\n\x0borientation\x18\x05\x20\x01(\
    \x0b2\x19.netsim.model.OrientationH\x03R\x0borientation\x88\x01\x01\x12(\
    \n\x05chips\x18\x06\x20\x03(\x0b2\x12.netsim.model.ChipR\x05chipsB\x07\n\
    \x05_nameB\n\n\x08_visibleB\x0b\n\t_positionB\x0e\n\x0c_orientationB\x05\
    \n\x03_id\"\x85\x01\n\x12ListDeviceResponse\x12.\n\x07devices\x18\x01\
    \x20\x03(\x0b2\x14.netsim.model.DeviceR\x07devices\x12?\n\rlast_modified\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0clastModified\"p\
    \n\x16SubscribeDeviceRequest\x12D\n\rlast_modified\x18\x01\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampH\0R\x0clastModified\x88\x01\x01B\x10\n\
    \x0e_last_modified\"\xbf\x01\n\x17SubscribeDeviceResponse\x12W\n\x14list\
    _device_response\x18\x01\x20\x01(\x0b2#.netsim.frontend.ListDeviceRespon\
    seH\0R\x12listDeviceResponse\x12?\n\x0eempty_response\x18\x02\x20\x01(\
    \x0b2\x16.google.protobuf.EmptyH\0R\remptyResponseB\n\n\x08response\"\
    \xa3\x01\n\x13PatchCaptureRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\
    \x02id\x12G\n\x05patch\x18\x02\x20\x01(\x0b21.netsim.frontend.PatchCaptu\
    reRequest.PatchCaptureR\x05patch\x1a3\n\x0cPatchCapture\x12\x19\n\x05sta\
    te\x18\x01\x20\x01(\x08H\0R\x05state\x88\x01\x01B\x08\n\x06_state\"H\n\
    \x13ListCaptureResponse\x121\n\x08captures\x18\x01\x20\x03(\x0b2\x15.net\
    sim.model.CaptureR\x08captures\"#\n\x11GetCaptureRequest\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\rR\x02id\";\n\x12GetCaptureResponse\x12%\n\x0ecapture_\
    stream\x18\x01\x20\x01(\x0cR\rcaptureStream2\xaa\x06\n\x0fFrontendServic\
    e\x12F\n\nGetVersion\x12\x16.google.protobuf.Empty\x1a\x20.netsim.fronte\
    nd.VersionResponse\x12[\n\x0cCreateDevice\x12$.netsim.frontend.CreateDev\
    iceRequest\x1a%.netsim.frontend.CreateDeviceResponse\x12H\n\nDeleteChip\
    \x12\".netsim.frontend.DeleteChipRequest\x1a\x16.google.protobuf.Empty\
    \x12J\n\x0bPatchDevice\x12#.netsim.frontend.PatchDeviceRequest\x1a\x16.g\
    oogle.protobuf.Empty\x127\n\x05Reset\x12\x16.google.protobuf.Empty\x1a\
    \x16.google.protobuf.Empty\x12I\n\nListDevice\x12\x16.google.protobuf.Em\
    pty\x1a#.netsim.frontend.ListDeviceResponse\x12d\n\x0fSubscribeDevice\
    \x12'.netsim.frontend.SubscribeDeviceRequest\x1a(.netsim.frontend.Subscr\
    ibeDeviceResponse\x12L\n\x0cPatchCapture\x12$.netsim.frontend.PatchCaptu\
    reRequest\x1a\x16.google.protobuf.Empty\x12K\n\x0bListCapture\x12\x16.go\
    ogle.protobuf.Empty\x1a$.netsim.frontend.ListCaptureResponse\x12W\n\nGet\
    Capture\x12\".netsim.frontend.GetCaptureRequest\x1a#.netsim.frontend.Get\
    CaptureResponse0\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::model::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(VersionResponse::generated_message_descriptor_data());
            messages.push(CreateDeviceRequest::generated_message_descriptor_data());
            messages.push(CreateDeviceResponse::generated_message_descriptor_data());
            messages.push(DeleteChipRequest::generated_message_descriptor_data());
            messages.push(PatchDeviceRequest::generated_message_descriptor_data());
            messages.push(ListDeviceResponse::generated_message_descriptor_data());
            messages.push(SubscribeDeviceRequest::generated_message_descriptor_data());
            messages.push(SubscribeDeviceResponse::generated_message_descriptor_data());
            messages.push(PatchCaptureRequest::generated_message_descriptor_data());
            messages.push(ListCaptureResponse::generated_message_descriptor_data());
            messages.push(GetCaptureRequest::generated_message_descriptor_data());
            messages.push(GetCaptureResponse::generated_message_descriptor_data());
            messages.push(patch_device_request::PatchDeviceFields::generated_message_descriptor_data());
            messages.push(patch_capture_request::PatchCapture::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
