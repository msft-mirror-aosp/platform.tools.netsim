// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `netsim/frontend.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.VersionResponse)
pub struct VersionResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.VersionResponse.version)
    pub version: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.VersionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VersionResponse {
    fn default() -> &'a VersionResponse {
        <VersionResponse as ::protobuf::Message>::default_instance()
    }
}

impl VersionResponse {
    pub fn new() -> VersionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &VersionResponse| { &m.version },
            |m: &mut VersionResponse| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VersionResponse>(
            "VersionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VersionResponse {
    const NAME: &'static str = "VersionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VersionResponse {
        VersionResponse::new()
    }

    fn clear(&mut self) {
        self.version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VersionResponse {
        static instance: VersionResponse = VersionResponse {
            version: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VersionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VersionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VersionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.CreateDeviceRequest)
pub struct CreateDeviceRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.CreateDeviceRequest.device)
    pub device: ::protobuf::MessageField<super::model::DeviceCreate>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.CreateDeviceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateDeviceRequest {
    fn default() -> &'a CreateDeviceRequest {
        <CreateDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceRequest {
    pub fn new() -> CreateDeviceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::model::DeviceCreate>(
            "device",
            |m: &CreateDeviceRequest| { &m.device },
            |m: &mut CreateDeviceRequest| { &mut m.device },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateDeviceRequest>(
            "CreateDeviceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateDeviceRequest {
    const NAME: &'static str = "CreateDeviceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.device)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.device.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateDeviceRequest {
        CreateDeviceRequest::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateDeviceRequest {
        static instance: CreateDeviceRequest = CreateDeviceRequest {
            device: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateDeviceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateDeviceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.CreateDeviceResponse)
pub struct CreateDeviceResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.CreateDeviceResponse.device)
    pub device: ::protobuf::MessageField<super::model::Device>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.CreateDeviceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateDeviceResponse {
    fn default() -> &'a CreateDeviceResponse {
        <CreateDeviceResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceResponse {
    pub fn new() -> CreateDeviceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::model::Device>(
            "device",
            |m: &CreateDeviceResponse| { &m.device },
            |m: &mut CreateDeviceResponse| { &mut m.device },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateDeviceResponse>(
            "CreateDeviceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateDeviceResponse {
    const NAME: &'static str = "CreateDeviceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.device)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.device.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateDeviceResponse {
        CreateDeviceResponse::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateDeviceResponse {
        static instance: CreateDeviceResponse = CreateDeviceResponse {
            device: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateDeviceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateDeviceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateDeviceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.DeleteChipRequest)
pub struct DeleteChipRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.DeleteChipRequest.id)
    pub id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.DeleteChipRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteChipRequest {
    fn default() -> &'a DeleteChipRequest {
        <DeleteChipRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteChipRequest {
    pub fn new() -> DeleteChipRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &DeleteChipRequest| { &m.id },
            |m: &mut DeleteChipRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteChipRequest>(
            "DeleteChipRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteChipRequest {
    const NAME: &'static str = "DeleteChipRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteChipRequest {
        DeleteChipRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteChipRequest {
        static instance: DeleteChipRequest = DeleteChipRequest {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteChipRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteChipRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteChipRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteChipRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.PatchDeviceRequest)
pub struct PatchDeviceRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.PatchDeviceRequest.device)
    pub device: ::protobuf::MessageField<super::model::Device>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.PatchDeviceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PatchDeviceRequest {
    fn default() -> &'a PatchDeviceRequest {
        <PatchDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PatchDeviceRequest {
    pub fn new() -> PatchDeviceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::model::Device>(
            "device",
            |m: &PatchDeviceRequest| { &m.device },
            |m: &mut PatchDeviceRequest| { &mut m.device },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PatchDeviceRequest>(
            "PatchDeviceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PatchDeviceRequest {
    const NAME: &'static str = "PatchDeviceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.device)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.device.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PatchDeviceRequest {
        PatchDeviceRequest::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PatchDeviceRequest {
        static instance: PatchDeviceRequest = PatchDeviceRequest {
            device: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PatchDeviceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PatchDeviceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PatchDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PatchDeviceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.ListDeviceResponse)
pub struct ListDeviceResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.ListDeviceResponse.devices)
    pub devices: ::std::vec::Vec<super::model::Device>,
    // @@protoc_insertion_point(field:netsim.frontend.ListDeviceResponse.last_modified)
    pub last_modified: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.ListDeviceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListDeviceResponse {
    fn default() -> &'a ListDeviceResponse {
        <ListDeviceResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListDeviceResponse {
    pub fn new() -> ListDeviceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "devices",
            |m: &ListDeviceResponse| { &m.devices },
            |m: &mut ListDeviceResponse| { &mut m.devices },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_modified",
            |m: &ListDeviceResponse| { &m.last_modified },
            |m: &mut ListDeviceResponse| { &mut m.last_modified },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListDeviceResponse>(
            "ListDeviceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListDeviceResponse {
    const NAME: &'static str = "ListDeviceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.devices.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_modified)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.devices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.last_modified.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.devices {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.last_modified.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListDeviceResponse {
        ListDeviceResponse::new()
    }

    fn clear(&mut self) {
        self.devices.clear();
        self.last_modified.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListDeviceResponse {
        static instance: ListDeviceResponse = ListDeviceResponse {
            devices: ::std::vec::Vec::new(),
            last_modified: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListDeviceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListDeviceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListDeviceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDeviceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.PatchCaptureRequest)
pub struct PatchCaptureRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.PatchCaptureRequest.id)
    pub id: u32,
    // @@protoc_insertion_point(field:netsim.frontend.PatchCaptureRequest.patch)
    pub patch: ::protobuf::MessageField<patch_capture_request::PatchCapture>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.PatchCaptureRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PatchCaptureRequest {
    fn default() -> &'a PatchCaptureRequest {
        <PatchCaptureRequest as ::protobuf::Message>::default_instance()
    }
}

impl PatchCaptureRequest {
    pub fn new() -> PatchCaptureRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PatchCaptureRequest| { &m.id },
            |m: &mut PatchCaptureRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, patch_capture_request::PatchCapture>(
            "patch",
            |m: &PatchCaptureRequest| { &m.patch },
            |m: &mut PatchCaptureRequest| { &mut m.patch },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PatchCaptureRequest>(
            "PatchCaptureRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PatchCaptureRequest {
    const NAME: &'static str = "PatchCaptureRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.patch)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if let Some(v) = self.patch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if let Some(v) = self.patch.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PatchCaptureRequest {
        PatchCaptureRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.patch.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PatchCaptureRequest {
        static instance: PatchCaptureRequest = PatchCaptureRequest {
            id: 0,
            patch: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PatchCaptureRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PatchCaptureRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PatchCaptureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PatchCaptureRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PatchCaptureRequest`
pub mod patch_capture_request {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:netsim.frontend.PatchCaptureRequest.PatchCapture)
    pub struct PatchCapture {
        // message fields
        // @@protoc_insertion_point(field:netsim.frontend.PatchCaptureRequest.PatchCapture.state)
        pub state: ::protobuf::EnumOrUnknown<super::super::model::State>,
        // special fields
        // @@protoc_insertion_point(special_field:netsim.frontend.PatchCaptureRequest.PatchCapture.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PatchCapture {
        fn default() -> &'a PatchCapture {
            <PatchCapture as ::protobuf::Message>::default_instance()
        }
    }

    impl PatchCapture {
        pub fn new() -> PatchCapture {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "state",
                |m: &PatchCapture| { &m.state },
                |m: &mut PatchCapture| { &mut m.state },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PatchCapture>(
                "PatchCaptureRequest.PatchCapture",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PatchCapture {
        const NAME: &'static str = "PatchCapture";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.state = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.state != ::protobuf::EnumOrUnknown::new(super::super::model::State::UNKNOWN) {
                my_size += ::protobuf::rt::int32_size(1, self.state.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.state != ::protobuf::EnumOrUnknown::new(super::super::model::State::UNKNOWN) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PatchCapture {
            PatchCapture::new()
        }

        fn clear(&mut self) {
            self.state = ::protobuf::EnumOrUnknown::new(super::super::model::State::UNKNOWN);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PatchCapture {
            static instance: PatchCapture = PatchCapture {
                state: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PatchCapture {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PatchCaptureRequest.PatchCapture").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PatchCapture {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PatchCapture {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.ListCaptureResponse)
pub struct ListCaptureResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.ListCaptureResponse.captures)
    pub captures: ::std::vec::Vec<super::model::Capture>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.ListCaptureResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListCaptureResponse {
    fn default() -> &'a ListCaptureResponse {
        <ListCaptureResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListCaptureResponse {
    pub fn new() -> ListCaptureResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "captures",
            |m: &ListCaptureResponse| { &m.captures },
            |m: &mut ListCaptureResponse| { &mut m.captures },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListCaptureResponse>(
            "ListCaptureResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListCaptureResponse {
    const NAME: &'static str = "ListCaptureResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.captures.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.captures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.captures {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListCaptureResponse {
        ListCaptureResponse::new()
    }

    fn clear(&mut self) {
        self.captures.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListCaptureResponse {
        static instance: ListCaptureResponse = ListCaptureResponse {
            captures: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListCaptureResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListCaptureResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListCaptureResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListCaptureResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.GetCaptureRequest)
pub struct GetCaptureRequest {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.GetCaptureRequest.id)
    pub id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.GetCaptureRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetCaptureRequest {
    fn default() -> &'a GetCaptureRequest {
        <GetCaptureRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCaptureRequest {
    pub fn new() -> GetCaptureRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetCaptureRequest| { &m.id },
            |m: &mut GetCaptureRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCaptureRequest>(
            "GetCaptureRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetCaptureRequest {
    const NAME: &'static str = "GetCaptureRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetCaptureRequest {
        GetCaptureRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetCaptureRequest {
        static instance: GetCaptureRequest = GetCaptureRequest {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetCaptureRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetCaptureRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetCaptureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCaptureRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:netsim.frontend.GetCaptureResponse)
pub struct GetCaptureResponse {
    // message fields
    // @@protoc_insertion_point(field:netsim.frontend.GetCaptureResponse.capture_stream)
    pub capture_stream: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:netsim.frontend.GetCaptureResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetCaptureResponse {
    fn default() -> &'a GetCaptureResponse {
        <GetCaptureResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetCaptureResponse {
    pub fn new() -> GetCaptureResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "capture_stream",
            |m: &GetCaptureResponse| { &m.capture_stream },
            |m: &mut GetCaptureResponse| { &mut m.capture_stream },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCaptureResponse>(
            "GetCaptureResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetCaptureResponse {
    const NAME: &'static str = "GetCaptureResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.capture_stream = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.capture_stream.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.capture_stream);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.capture_stream.is_empty() {
            os.write_bytes(1, &self.capture_stream)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetCaptureResponse {
        GetCaptureResponse::new()
    }

    fn clear(&mut self) {
        self.capture_stream.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetCaptureResponse {
        static instance: GetCaptureResponse = GetCaptureResponse {
            capture_stream: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetCaptureResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetCaptureResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetCaptureResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCaptureResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15netsim/frontend.proto\x12\x0fnetsim.frontend\x1a\x1bgoogle/protobu\
    f/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x12netsim/model\
    .proto\"+\n\x0fVersionResponse\x12\x18\n\x07version\x18\x01\x20\x01(\tR\
    \x07version\"I\n\x13CreateDeviceRequest\x122\n\x06device\x18\x01\x20\x01\
    (\x0b2\x1a.netsim.model.DeviceCreateR\x06device\"D\n\x14CreateDeviceResp\
    onse\x12,\n\x06device\x18\x01\x20\x01(\x0b2\x14.netsim.model.DeviceR\x06\
    device\"#\n\x11DeleteChipRequest\x12\x0e\n\x02id\x18\x02\x20\x01(\rR\x02\
    id\"B\n\x12PatchDeviceRequest\x12,\n\x06device\x18\x02\x20\x01(\x0b2\x14\
    .netsim.model.DeviceR\x06device\"\x85\x01\n\x12ListDeviceResponse\x12.\n\
    \x07devices\x18\x01\x20\x03(\x0b2\x14.netsim.model.DeviceR\x07devices\
    \x12?\n\rlast_modified\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Timesta\
    mpR\x0clastModified\"\xa9\x01\n\x13PatchCaptureRequest\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\rR\x02id\x12G\n\x05patch\x18\x02\x20\x01(\x0b21.netsim\
    .frontend.PatchCaptureRequest.PatchCaptureR\x05patch\x1a9\n\x0cPatchCapt\
    ure\x12)\n\x05state\x18\x01\x20\x01(\x0e2\x13.netsim.model.StateR\x05sta\
    te\"H\n\x13ListCaptureResponse\x121\n\x08captures\x18\x01\x20\x03(\x0b2\
    \x15.netsim.model.CaptureR\x08captures\"#\n\x11GetCaptureRequest\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\rR\x02id\";\n\x12GetCaptureResponse\x12%\n\x0e\
    capture_stream\x18\x01\x20\x01(\x0cR\rcaptureStream2\xc4\x05\n\x0fFronte\
    ndService\x12F\n\nGetVersion\x12\x16.google.protobuf.Empty\x1a\x20.netsi\
    m.frontend.VersionResponse\x12[\n\x0cCreateDevice\x12$.netsim.frontend.C\
    reateDeviceRequest\x1a%.netsim.frontend.CreateDeviceResponse\x12H\n\nDel\
    eteChip\x12\".netsim.frontend.DeleteChipRequest\x1a\x16.google.protobuf.\
    Empty\x12J\n\x0bPatchDevice\x12#.netsim.frontend.PatchDeviceRequest\x1a\
    \x16.google.protobuf.Empty\x127\n\x05Reset\x12\x16.google.protobuf.Empty\
    \x1a\x16.google.protobuf.Empty\x12I\n\nListDevice\x12\x16.google.protobu\
    f.Empty\x1a#.netsim.frontend.ListDeviceResponse\x12L\n\x0cPatchCapture\
    \x12$.netsim.frontend.PatchCaptureRequest\x1a\x16.google.protobuf.Empty\
    \x12K\n\x0bListCapture\x12\x16.google.protobuf.Empty\x1a$.netsim.fronten\
    d.ListCaptureResponse\x12W\n\nGetCapture\x12\".netsim.frontend.GetCaptur\
    eRequest\x1a#.netsim.frontend.GetCaptureResponse0\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::model::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(VersionResponse::generated_message_descriptor_data());
            messages.push(CreateDeviceRequest::generated_message_descriptor_data());
            messages.push(CreateDeviceResponse::generated_message_descriptor_data());
            messages.push(DeleteChipRequest::generated_message_descriptor_data());
            messages.push(PatchDeviceRequest::generated_message_descriptor_data());
            messages.push(ListDeviceResponse::generated_message_descriptor_data());
            messages.push(PatchCaptureRequest::generated_message_descriptor_data());
            messages.push(ListCaptureResponse::generated_message_descriptor_data());
            messages.push(GetCaptureRequest::generated_message_descriptor_data());
            messages.push(GetCaptureResponse::generated_message_descriptor_data());
            messages.push(patch_capture_request::PatchCapture::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
