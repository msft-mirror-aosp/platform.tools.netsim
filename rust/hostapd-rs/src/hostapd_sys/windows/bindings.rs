/* automatically generated by rust-bindgen 0.69.4 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const MAX_KEY_MATERIAL_LEN: u32 = 32;
pub const VIRTIO_WIFI_CTRL_CMD_TERMINATE: &[u8; 19] = b"CTRL_CMD_TERMINATE\0";
pub const VIRTIO_WIFI_CTRL_CMD_RELOAD_CONFIG: &[u8; 23] = b"CTRL_CMD_RELOAD_CONFIG\0";
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn set_virtio_sock(sock: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_virtio_ctrl_sock(sock: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_wifi_key_data {
    pub key_material: [u8; 32usize],
    pub key_len: ::std::os::raw::c_int,
    pub key_idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_virtio_wifi_key_data() {
    const UNINIT: ::std::mem::MaybeUninit<virtio_wifi_key_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<virtio_wifi_key_data>(),
        40usize,
        concat!("Size of: ", stringify!(virtio_wifi_key_data))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_wifi_key_data>(),
        4usize,
        concat!("Alignment of ", stringify!(virtio_wifi_key_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_material) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(virtio_wifi_key_data),
            "::",
            stringify!(key_material)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_len) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(virtio_wifi_key_data), "::", stringify!(key_len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_idx) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(virtio_wifi_key_data), "::", stringify!(key_idx))
    );
}
extern "C" {
    pub fn get_active_ptk() -> virtio_wifi_key_data;
}
extern "C" {
    pub fn get_active_gtk() -> virtio_wifi_key_data;
}
