// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `packet_streamer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct StreamPacketsRequest {
    // message oneof groups
    pub request_type: ::std::option::Option<StreamPacketsRequest_oneof_request_type>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamPacketsRequest {
    fn default() -> &'a StreamPacketsRequest {
        <StreamPacketsRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum StreamPacketsRequest_oneof_request_type {
    initial_info(super::startup::ChipInfo),
    hci_packet(super::hci_packet::HCIPacket),
    packet(::std::vec::Vec<u8>),
}

impl StreamPacketsRequest {
    pub fn new() -> StreamPacketsRequest {
        ::std::default::Default::default()
    }

    // .netsim.startup.ChipInfo initial_info = 1;


    pub fn get_initial_info(&self) -> &super::startup::ChipInfo {
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::initial_info(ref v)) => v,
            _ => <super::startup::ChipInfo as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_initial_info(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_initial_info(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::initial_info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_initial_info(&mut self, v: super::startup::ChipInfo) {
        self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::initial_info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_initial_info(&mut self) -> &mut super::startup::ChipInfo {
        if let ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::initial_info(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::initial_info(super::startup::ChipInfo::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::initial_info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_initial_info(&mut self) -> super::startup::ChipInfo {
        if self.has_initial_info() {
            match self.request_type.take() {
                ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::initial_info(v)) => v,
                _ => panic!(),
            }
        } else {
            super::startup::ChipInfo::new()
        }
    }

    // .netsim.packet.HCIPacket hci_packet = 2;


    pub fn get_hci_packet(&self) -> &super::hci_packet::HCIPacket {
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::hci_packet(ref v)) => v,
            _ => <super::hci_packet::HCIPacket as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_hci_packet(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_hci_packet(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::hci_packet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hci_packet(&mut self, v: super::hci_packet::HCIPacket) {
        self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::hci_packet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hci_packet(&mut self) -> &mut super::hci_packet::HCIPacket {
        if let ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::hci_packet(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::hci_packet(super::hci_packet::HCIPacket::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::hci_packet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hci_packet(&mut self) -> super::hci_packet::HCIPacket {
        if self.has_hci_packet() {
            match self.request_type.take() {
                ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::hci_packet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::hci_packet::HCIPacket::new()
        }
    }

    // bytes packet = 3;


    pub fn get_packet(&self) -> &[u8] {
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::packet(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_packet(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_packet(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::packet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_packet(&mut self, v: ::std::vec::Vec<u8>) {
        self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::packet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_packet(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::packet(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::packet(::std::vec::Vec::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::packet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_packet(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_packet() {
            match self.request_type.take() {
                ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::packet(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for StreamPacketsRequest {
    fn is_initialized(&self) -> bool {
        if let Some(StreamPacketsRequest_oneof_request_type::initial_info(ref v)) = self.request_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StreamPacketsRequest_oneof_request_type::hci_packet(ref v)) = self.request_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::initial_info(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::hci_packet(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_type = ::std::option::Option::Some(StreamPacketsRequest_oneof_request_type::packet(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.request_type {
            match v {
                &StreamPacketsRequest_oneof_request_type::initial_info(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamPacketsRequest_oneof_request_type::hci_packet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamPacketsRequest_oneof_request_type::packet(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.request_type {
            match v {
                &StreamPacketsRequest_oneof_request_type::initial_info(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamPacketsRequest_oneof_request_type::hci_packet(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamPacketsRequest_oneof_request_type::packet(ref v) => {
                    os.write_bytes(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamPacketsRequest {
        StreamPacketsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::startup::ChipInfo>(
                "initial_info",
                StreamPacketsRequest::has_initial_info,
                StreamPacketsRequest::get_initial_info,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::hci_packet::HCIPacket>(
                "hci_packet",
                StreamPacketsRequest::has_hci_packet,
                StreamPacketsRequest::get_hci_packet,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "packet",
                StreamPacketsRequest::has_packet,
                StreamPacketsRequest::get_packet,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamPacketsRequest>(
                "StreamPacketsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamPacketsRequest {
        static instance: ::protobuf::rt::LazyV2<StreamPacketsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamPacketsRequest::new)
    }
}

impl ::protobuf::Clear for StreamPacketsRequest {
    fn clear(&mut self) {
        self.request_type = ::std::option::Option::None;
        self.request_type = ::std::option::Option::None;
        self.request_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamPacketsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamPacketsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct StreamPacketsResponse {
    // message oneof groups
    pub response_type: ::std::option::Option<StreamPacketsResponse_oneof_response_type>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamPacketsResponse {
    fn default() -> &'a StreamPacketsResponse {
        <StreamPacketsResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum StreamPacketsResponse_oneof_response_type {
    error(::std::string::String),
    hci_packet(super::hci_packet::HCIPacket),
    packet(::std::vec::Vec<u8>),
}

impl StreamPacketsResponse {
    pub fn new() -> StreamPacketsResponse {
        ::std::default::Default::default()
    }

    // string error = 1;


    pub fn get_error(&self) -> &str {
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::error(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_error(&mut self) {
        self.response_type = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::error(_)) = self.response_type {
        } else {
            self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::error(::std::string::String::new()));
        }
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        if self.has_error() {
            match self.response_type.take() {
                ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::error(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .netsim.packet.HCIPacket hci_packet = 2;


    pub fn get_hci_packet(&self) -> &super::hci_packet::HCIPacket {
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::hci_packet(ref v)) => v,
            _ => <super::hci_packet::HCIPacket as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_hci_packet(&mut self) {
        self.response_type = ::std::option::Option::None;
    }

    pub fn has_hci_packet(&self) -> bool {
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::hci_packet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hci_packet(&mut self, v: super::hci_packet::HCIPacket) {
        self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::hci_packet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hci_packet(&mut self) -> &mut super::hci_packet::HCIPacket {
        if let ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::hci_packet(_)) = self.response_type {
        } else {
            self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::hci_packet(super::hci_packet::HCIPacket::new()));
        }
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::hci_packet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hci_packet(&mut self) -> super::hci_packet::HCIPacket {
        if self.has_hci_packet() {
            match self.response_type.take() {
                ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::hci_packet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::hci_packet::HCIPacket::new()
        }
    }

    // bytes packet = 3;


    pub fn get_packet(&self) -> &[u8] {
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::packet(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_packet(&mut self) {
        self.response_type = ::std::option::Option::None;
    }

    pub fn has_packet(&self) -> bool {
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::packet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_packet(&mut self, v: ::std::vec::Vec<u8>) {
        self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::packet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_packet(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::packet(_)) = self.response_type {
        } else {
            self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::packet(::std::vec::Vec::new()));
        }
        match self.response_type {
            ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::packet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_packet(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_packet() {
            match self.response_type.take() {
                ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::packet(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for StreamPacketsResponse {
    fn is_initialized(&self) -> bool {
        if let Some(StreamPacketsResponse_oneof_response_type::hci_packet(ref v)) = self.response_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::error(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::hci_packet(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response_type = ::std::option::Option::Some(StreamPacketsResponse_oneof_response_type::packet(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response_type {
            match v {
                &StreamPacketsResponse_oneof_response_type::error(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &StreamPacketsResponse_oneof_response_type::hci_packet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamPacketsResponse_oneof_response_type::packet(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.response_type {
            match v {
                &StreamPacketsResponse_oneof_response_type::error(ref v) => {
                    os.write_string(1, v)?;
                },
                &StreamPacketsResponse_oneof_response_type::hci_packet(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamPacketsResponse_oneof_response_type::packet(ref v) => {
                    os.write_bytes(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamPacketsResponse {
        StreamPacketsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "error",
                StreamPacketsResponse::has_error,
                StreamPacketsResponse::get_error,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::hci_packet::HCIPacket>(
                "hci_packet",
                StreamPacketsResponse::has_hci_packet,
                StreamPacketsResponse::get_hci_packet,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "packet",
                StreamPacketsResponse::has_packet,
                StreamPacketsResponse::get_packet,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamPacketsResponse>(
                "StreamPacketsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamPacketsResponse {
        static instance: ::protobuf::rt::LazyV2<StreamPacketsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamPacketsResponse::new)
    }
}

impl ::protobuf::Clear for StreamPacketsResponse {
    fn clear(&mut self) {
        self.response_type = ::std::option::Option::None;
        self.response_type = ::std::option::Option::None;
        self.response_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamPacketsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamPacketsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15packet_streamer.proto\x12\rnetsim.packet\x1a\x10hci_packet.proto\
    \x1a\rstartup.proto\"\xba\x01\n\x14StreamPacketsRequest\x12=\n\x0cinitia\
    l_info\x18\x01\x20\x01(\x0b2\x18.netsim.startup.ChipInfoH\0R\x0binitialI\
    nfo\x129\n\nhci_packet\x18\x02\x20\x01(\x0b2\x18.netsim.packet.HCIPacket\
    H\0R\thciPacket\x12\x18\n\x06packet\x18\x03\x20\x01(\x0cH\0R\x06packetB\
    \x0e\n\x0crequest_type\"\x95\x01\n\x15StreamPacketsResponse\x12\x16\n\
    \x05error\x18\x01\x20\x01(\tH\0R\x05error\x129\n\nhci_packet\x18\x02\x20\
    \x01(\x0b2\x18.netsim.packet.HCIPacketH\0R\thciPacket\x12\x18\n\x06packe\
    t\x18\x03\x20\x01(\x0cH\0R\x06packetB\x0f\n\rresponse_type2p\n\x0ePacket\
    Streamer\x12^\n\rStreamPackets\x12#.netsim.packet.StreamPacketsRequest\
    \x1a$.netsim.packet.StreamPacketsResponse(\x010\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
