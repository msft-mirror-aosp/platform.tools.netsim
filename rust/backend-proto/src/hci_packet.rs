// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hci_packet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HCIPacket {
    // message fields
    pub field_type: HCIPacket_PacketType,
    pub packet: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HCIPacket {
    fn default() -> &'a HCIPacket {
        <HCIPacket as ::protobuf::Message>::default_instance()
    }
}

impl HCIPacket {
    pub fn new() -> HCIPacket {
        ::std::default::Default::default()
    }

    // .netsim.packet.HCIPacket.PacketType type = 1;


    pub fn get_field_type(&self) -> HCIPacket_PacketType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = HCIPacket_PacketType::PACKET_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: HCIPacket_PacketType) {
        self.field_type = v;
    }

    // bytes packet = 2;


    pub fn get_packet(&self) -> &[u8] {
        &self.packet
    }
    pub fn clear_packet(&mut self) {
        self.packet.clear();
    }

    // Param is passed by value, moved
    pub fn set_packet(&mut self, v: ::std::vec::Vec<u8>) {
        self.packet = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_packet(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.packet
    }

    // Take field
    pub fn take_packet(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.packet, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HCIPacket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.packet)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != HCIPacket_PacketType::PACKET_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.packet.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.packet);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != HCIPacket_PacketType::PACKET_TYPE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.packet.is_empty() {
            os.write_bytes(2, &self.packet)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HCIPacket {
        HCIPacket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HCIPacket_PacketType>>(
                "type",
                |m: &HCIPacket| { &m.field_type },
                |m: &mut HCIPacket| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "packet",
                |m: &HCIPacket| { &m.packet },
                |m: &mut HCIPacket| { &mut m.packet },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HCIPacket>(
                "HCIPacket",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HCIPacket {
        static instance: ::protobuf::rt::LazyV2<HCIPacket> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HCIPacket::new)
    }
}

impl ::protobuf::Clear for HCIPacket {
    fn clear(&mut self) {
        self.field_type = HCIPacket_PacketType::PACKET_TYPE_UNSPECIFIED;
        self.packet.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HCIPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HCIPacket {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum HCIPacket_PacketType {
    PACKET_TYPE_UNSPECIFIED = 0,
    PACKET_TYPE_HCI_COMMAND = 1,
    PACKET_TYPE_ACL = 2,
    PACKET_TYPE_SCO = 3,
    PACKET_TYPE_EVENT = 4,
    PACKET_TYPE_ISO = 5,
}

impl ::protobuf::ProtobufEnum for HCIPacket_PacketType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HCIPacket_PacketType> {
        match value {
            0 => ::std::option::Option::Some(HCIPacket_PacketType::PACKET_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(HCIPacket_PacketType::PACKET_TYPE_HCI_COMMAND),
            2 => ::std::option::Option::Some(HCIPacket_PacketType::PACKET_TYPE_ACL),
            3 => ::std::option::Option::Some(HCIPacket_PacketType::PACKET_TYPE_SCO),
            4 => ::std::option::Option::Some(HCIPacket_PacketType::PACKET_TYPE_EVENT),
            5 => ::std::option::Option::Some(HCIPacket_PacketType::PACKET_TYPE_ISO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HCIPacket_PacketType] = &[
            HCIPacket_PacketType::PACKET_TYPE_UNSPECIFIED,
            HCIPacket_PacketType::PACKET_TYPE_HCI_COMMAND,
            HCIPacket_PacketType::PACKET_TYPE_ACL,
            HCIPacket_PacketType::PACKET_TYPE_SCO,
            HCIPacket_PacketType::PACKET_TYPE_EVENT,
            HCIPacket_PacketType::PACKET_TYPE_ISO,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HCIPacket_PacketType>("HCIPacket.PacketType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HCIPacket_PacketType {
}

impl ::std::default::Default for HCIPacket_PacketType {
    fn default() -> Self {
        HCIPacket_PacketType::PACKET_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for HCIPacket_PacketType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10hci_packet.proto\x12\rnetsim.packet\"\xfb\x01\n\tHCIPacket\x127\n\
    \x04type\x18\x01\x20\x01(\x0e2#.netsim.packet.HCIPacket.PacketTypeR\x04t\
    ype\x12\x16\n\x06packet\x18\x02\x20\x01(\x0cR\x06packet\"\x9c\x01\n\nPac\
    ketType\x12\x1b\n\x17PACKET_TYPE_UNSPECIFIED\x10\0\x12\x1b\n\x17PACKET_T\
    YPE_HCI_COMMAND\x10\x01\x12\x13\n\x0fPACKET_TYPE_ACL\x10\x02\x12\x13\n\
    \x0fPACKET_TYPE_SCO\x10\x03\x12\x15\n\x11PACKET_TYPE_EVENT\x10\x04\x12\
    \x13\n\x0fPACKET_TYPE_ISO\x10\x05BJ\n\x1fcom.android.emulation.bluetooth\
    P\x01\xf8\x01\x01\xa2\x02\x03AEB\xaa\x02\x1bAndroid.Emulation.Bluetoothb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
