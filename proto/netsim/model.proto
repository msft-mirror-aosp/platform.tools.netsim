// Copyright 2022 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package netsim.model;

import "netsim/common.proto";
import "google/protobuf/timestamp.proto";
import "rootcanal/configuration.proto";

// A 3D position. A valid Position must have both x and y coordinates.
// The position coordinates are in meters.
message Position {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Orientation {
  float yaw = 1;
  float pitch = 2;
  float roll = 3;
}

enum PhyKind {
  NONE = 0;
  BLUETOOTH_CLASSIC = 1;
  BLUETOOTH_LOW_ENERGY = 2;
  WIFI = 3;
  UWB = 4;
  WIFI_RTT = 5;
}

// An explicit valued boolean.
enum State {
  UNKNOWN = 0;
  ON = 1;
  OFF = 2;
}

message Chip {
  netsim.common.ChipKind kind = 1;
  uint32 id = 2;
  string name = 3;  // optional like "rear-right"

  string manufacturer = 4;  // optional like Quorvo
  string product_name = 5;  // optional like DW300

  // Radio state associated with the Chip
  message Radio {
    State state = 1;
    float range = 2;
    int32 tx_count = 3;
    int32 rx_count = 4;
  }

  // Bluetooth has 2 radios
  message Bluetooth {
    Radio low_energy = 1;
    Radio classic = 2;
    // BD_ADDR address
    string address = 3;
  }

  message BluetoothBeacon {
    message AdvertiseSettings {
      // From
      // packages/modules/Bluetooth/framework/java/android/bluetooth/le/BluetoothLeAdvertiser.java#151
      enum AdvertiseMode {
        // Perform Bluetooth LE advertising in low power mode. This is the
        // default and preferred advertising mode as it consumes the least power
        LOW_POWER = 0;
        // Perform Bluetooth LE advertising in balanced power mode. This is
        // balanced between advertising frequency and power consumption
        BALANCED = 1;
        // Perform Bluetooth LE advertising in low latency, high power mode.
        // This has the highest power consumption and should not be used for
        // continuous background advertising
        LOW_LATENCY = 2;
      }

      // From
      // packages/modules/Bluetooth/framework/java/android/bluetooth/le/BluetoothLeAdvertiser.java#159
      enum AdvertiseTxPower {
        // Advertise using the lowest transmission (TX) power level. Low
        // transmission power can be used to restrict the visibility range of
        // advertising packets
        ULTRA_LOW = 0;
        // Advertise using low TX power level. This is the default
        LOW = 1;
        // Advertise using medium TX power level
        MEDIUM = 2;
        // Advertise using high TX power level. This corresponds to largest
        // visibility range of the advertising packet
        HIGH = 3;
      }

      // Time interval between advertisments.
      oneof interval {
        AdvertiseMode advertise_mode = 1;
        // Numeric time interval between advertisements in ms.
        uint64 milliseconds = 2;
      }

      // Transmission power level.
      oneof tx_power {
        AdvertiseTxPower tx_power_level = 3;
        // Numeric transmission power in dBm. Must be within [-127, 127].
        int32 dbm = 4;
      }

      bool scannable = 5;
      uint64 timeout = 6;
    }

    message AdvertiseData {
      message Service {
        string uuid = 1;
        bytes data = 2;
      }

      // Whether the device name should be included in advertise packet.
      bool include_device_name = 1;
      // Whether the transmission power level should be included in the
      // advertise packet.
      bool include_tx_power_level = 2;
      // Manufacturer specific data.
      bytes manufacturer_data = 3;
      // GATT services supported by the devices
      repeated Service services = 4;
    }

    // TODO: Only include Radio low_energy.
    Bluetooth bt = 1;
    string address = 2;
    AdvertiseSettings settings = 3;
    AdvertiseData adv_data = 4;
    AdvertiseData scan_response = 5;
  }

  oneof chip {
    Bluetooth bt = 6;                // dual mode.
    BluetoothBeacon ble_beacon = 9;  // low energy for beacon.
    Radio uwb = 7;
    Radio wifi = 8;
  }
}

message ChipCreate {
  message BluetoothBeaconCreate {
    string address = 1;
    Chip.BluetoothBeacon.AdvertiseSettings settings = 3;
    Chip.BluetoothBeacon.AdvertiseData adv_data = 4;
    Chip.BluetoothBeacon.AdvertiseData scan_response = 5;
  }

  netsim.common.ChipKind kind = 1;
  string address = 2;
  string name = 3;
  string manufacturer = 4;
  string product_name = 5;
  oneof chip {
    BluetoothBeaconCreate ble_beacon = 6;
  }
  // optional rootcanal configuration for bluetooth chipsets.
  rootcanal.configuration.Controller bt_properties = 7;
}

message Device {
  uint32 id = 1;
  string name = 2;  // settable at creation
  State visible = 3;
  Position position = 4;
  Orientation orientation = 5;
  // Device can have multiple chips of the same kind.
  repeated Chip chips = 6;
}

message DeviceCreate {
  string name = 1;
  Position position = 2;
  Orientation orientation = 3;
  repeated ChipCreate chips = 4;
}

message Scene {
  repeated Device devices = 1;
}

message Capture {
  uint32 id = 1;  // same as chip_id
  netsim.common.ChipKind chip_kind = 2;
  // device AVD name
  string device_name = 3;
  // capture state
  State state = 4;
  // size of current capture
  int32 size = 5;
  // number of records in current capture
  int32 records = 6;
  google.protobuf.Timestamp timestamp = 7;
  bool valid = 8;
}
