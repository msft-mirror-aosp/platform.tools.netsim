# Copyright 2022 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

android_add_library(
  TARGET util-lib
  LICENSE Apache-2.0
  SRC util/crash_report.cc
      util/crash_report.h
      util/filesystem.h
      util/ini_file.cc
      util/ini_file.h
      util/log.cc
      util/log.h
      util/os_utils.cc
      util/os_utils.h
      util/string_utils.cc
      util/string_utils.h)
target_include_directories(util-lib PRIVATE .)
target_compile_definitions(util-lib PUBLIC NETSIM_ANDROID_EMULATOR)

if(TARGET Rust::Rustc)
  set(cxx_bridge_binary_folder
      ${CMAKE_BINARY_DIR}/cargo/build/${Rust_CARGO_TARGET_CACHED}/cxxbridge)
  set(common_header ${cxx_bridge_binary_folder}/rust/cxx.h)
  set(cxx_bridge_source_file "src/ffi.rs")
  set(crate_name "netsim-cli")
  set(binding_header
      ${cxx_bridge_binary_folder}/${crate_name}/${cxx_bridge_source_file}.h)
  set(binding_source
      ${cxx_bridge_binary_folder}/${crate_name}/${cxx_bridge_source_file}.cc)

  # Make sure we have the cxx files generated before we build them.
  add_custom_command(OUTPUT ${common_header} ${binding_header} ${binding_source}
                     COMMAND DEPENDS ${crate_name}-static)

  android_add_library(
    TARGET frontend-client
    LICENSE Apache-2.0
    SRC ${binding_header} ${binding_source} ${common_header}
        frontend/frontend_client.cc frontend/frontend_client.h
    DEPS grpc++ netsim-cli-proto-lib protobuf::libprotobuf util-lib)
  target_include_directories(frontend-client PRIVATE .
                             PUBLIC ${cxx_bridge_binary_folder})
endif()

if(NOT NETSIM_EXT)
  android_add_library(
    TARGET packet-streamer-client-lib
    LICENSE Apache-2.0
    SRC backend/packet_streamer_client.cc backend/packet_streamer_client.h
    DEPS android-emu-base
         android-emu-base-headers
         android-emu-base-process
         android-emu-metrics
         android-grpc-interceptors
         grpc++
         packet-streamer-proto-lib
         protobuf::libprotobuf
         util-lib)
  target_include_directories(packet-streamer-client-lib
                             PUBLIC ${CMAKE_CURRENT_LIST_DIR})
endif()

if(TARGET Rust::Rustc)
  set(cxx_bridge_binary_folder
      ${CMAKE_BINARY_DIR}/cargo/build/${Rust_CARGO_TARGET_CACHED}/cxxbridge)
  set(common_header ${cxx_bridge_binary_folder}/rust/cxx.h)
  set(cxx_bridge_source_file "src/ffi.rs")
  set(crate_name "netsim-daemon")
  set(binding_header
      ${cxx_bridge_binary_folder}/${crate_name}/${cxx_bridge_source_file}.h)
  set(binding_source
      ${cxx_bridge_binary_folder}/${crate_name}/${cxx_bridge_source_file}.cc)

  # Make sure we have the cxx files generated before we build them.
  add_custom_command(OUTPUT ${common_header} ${binding_header} ${binding_source}
                     COMMAND DEPENDS ${crate_name}-static)

  android_add_library(
    TARGET netsimd-lib
    LICENSE Apache-2.0
    SRC ${binding_header}
        ${binding_source}
        ${common_header}
        backend/backend_packet_hub.h
        backend/grpc_server.cc
        backend/grpc_server.h
        core/server.cc
        core/server.h
        frontend/frontend_client_stub.cc
        frontend/frontend_client_stub.h
        frontend/frontend_server.cc
        frontend/frontend_server.h
        frontend/server_response_writable.h
        hci/async_manager.cc
        hci/bluetooth_facade.cc
        hci/bluetooth_facade.h
        hci/hci_packet_transport.cc
        hci/hci_packet_transport.h
        hci/rust_device.cc
        hci/rust_device.h
        wifi/wifi_facade.cc
        wifi/wifi_facade.h
        wifi/wifi_packet_hub.h
    DEPS android-emu-base
         android-emu-base-headers
         android-wifi-service
         grpc++
         libbt-rootcanal
         netsim-daemon
         netsimd-proto-lib
         packet-streamer-proto-lib
         protobuf::libprotobuf
         util-lib)
  target_include_directories(
    netsimd-lib PRIVATE . ${PROTOBUF_INCLUDE_DIR} ../rust/netsim-daemon
                        ../rust/netsim-daemon/cxx
    PUBLIC ${cxx_bridge_binary_folder})
  target_compile_definitions(netsimd-lib PUBLIC NETSIM_ANDROID_EMULATOR)

endif()
